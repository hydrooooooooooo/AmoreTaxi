generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Image {
  id            Int      @id @default(autoincrement())
  uuid          String   @unique @default(uuid())
  filename      String
  originalName  String
  url           String
  originalUrl   String
  thumbnailUrl  String
  size          Int
  width         Int
  height        Int
  mimeType      String
  category      String
  uploadedAt    DateTime @default(now())
  altText       String?
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  date        DateTime
  description String?
  location    String?
}

model InstagramPost {
  id        String   @id
  caption   String?
  mediaType String   @map("media_type")
  mediaUrl  String   @map("media_url")
  permalink String
  timestamp DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String    @id @default(cuid())
  uuid          String    @unique @default(uuid())
  email         String    @unique
  password      String
  name          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailConfig   EmailConfig?
}

model EmailConfig {
  id        String   @id @default(cuid())
  smtpHost  String
  smtpPort  Int
  email     String
  password  String   // Note: In a real production app, this should be encrypted.
  fromName  String
  toEmail   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}



model ContactMessage {
  id               String           @id @default(cuid())
  name             String
  email            String
  phone            String?
  subject          String
  message          String           @db.Text
  submittedAt      DateTime         @default(now())
  status           MessageStatus    @default(new)
  processingStatus ProcessingStatus @default(pending)
  paymentStatus    PaymentStatus    @default(not_applicable)
  ipAddress        String?
  deliveryAddress  String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

// Modèles pour le CRM "Expense & Flow"
model Expense {
  id            Int                  @id @default(autoincrement())
  date          DateTime
  amount        Float
  category      String
  description   String
  supplier      String?
  receiptUrl    String?              @map("receipt_url")
  paymentMethod ExpensePaymentMethod @default(cash) @map("payment_method")
  status        ExpenseStatus        @default(pending)
  notes         String?              @db.Text
  tags          String[]             @default([])
  createdAt     DateTime             @default(now()) @map("created_at")
  updatedAt     DateTime             @updatedAt @map("updated_at")
}

model Flow {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  steps       Json // Pour stocker les étapes d'un processus
  createdAt   DateTime  @default(now())
}

enum MessageStatus {
  new
  read
  replied
}

enum ProcessingStatus {
  pending
  in_progress
  processed
}

enum PaymentStatus {
  not_applicable
  pending
  received
  not_received
}

enum ExpensePaymentMethod {
  cash
  card
  transfer
  check
}

enum ExpenseStatus {
  pending
  approved
  paid
  rejected
}
